// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url = env("DATABASE_URL")
}


model Store {
id String @id @default(auto()) @map("_id") @db.ObjectId
name String
userId String
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt

orders Order[] @relation("StoreToOrder")
products Product[] @relation("StoreToProduct")
billboards Billboard[] @relation("StoreToBillboard")
categories Category[] @relation("StoreToCategory")
sizes Size[] @relation("StoreToSize")
color Color[] @relation("StoreToColor")
}

model Billboard {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  storeId String @db.ObjectId
  label String
  imageUrl String
  categories Category[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  store Store @relation("StoreToBillboard", fields: [storeId], references: [id])

  
  @@index([storeId])
}

model Category {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  storeId String @db.ObjectId
  billboardId String @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  products Product[] @relation("CategoryToProduct")

  store Store @relation("StoreToCategory", fields: [storeId], references: [id])
  billboard Billboard @relation(fields: [billboardId], references: [id])

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  storeId String @db.ObjectId
  name String
  value String
  products Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store Store @relation("StoreToSize", fields: [storeId], references: [id])


  @@index([storeId])
}

model Color {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  storeId String @db.ObjectId
  store Store @relation("StoreToColor", fields: [storeId], references: [id])
  name String
  value String
  products Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model Product {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  storeId String @db.ObjectId
  store Store @relation("StoreToProduct", fields: [storeId], references: [id]) //onDelete Cascade
  categoryId String @db.ObjectId
  category Category @relation("CategoryToProduct", fields: [categoryId], references: [id]) //onDelete Cascade
  name String
  price String
  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)
  sizeId String @db.ObjectId
  size Size @relation(fields: [sizeId], references: [id])
  colorId String @db.ObjectId
  color Color @relation(fields: [colorId], references: [id])
  images Image[]
  orderedItems OrderedItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([colorId])
  @@index([sizeId])
  @@index([categoryId])
  @@index([storeId])
}

model Image {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  productId String @db.ObjectId
  product Product @relation(fields: [productId], references: [id]) //onDelete Cascade
  url String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Order {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  storeId String @db.ObjectId
  store Store @relation("StoreToOrder", fields: [storeId], references: [id]) //onDelete Cascade
  orderedItems OrderedItem[]
  isPaid Boolean @default(false)
  phone String @default("")
  address String @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model OrderedItem {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  orderId String @db.ObjectId
  order Order @relation(fields: [orderId], references: [id]) //onDelete Cascade
  productId String @db.ObjectId
  product Product @relation(fields: [productId], references: [id]) //onDelete Cascade


  @@index([orderId])
  @@index([productId])
}